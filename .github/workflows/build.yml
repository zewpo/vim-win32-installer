name: GitHub Build

on:
  push:
    branches: ['**']
  pull_request:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for
  # pull requests or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:

  windows:
    runs-on: windows-2022

    env:
      # Interfaces
      # Lua
      LUA_VER: 54
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: 5.4.2
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      LUA_DIR: D:\Lua
      # do not want \L to end up in pathdef.c and compiler complaining about unknown escape sequences \l
      LUA_DIR_SLASH: D:/Lua
      # Python 2
      PYTHON_VER: 27
      PYTHON_VER_DOT: '2.7'
      PYTHON_DIR: 'C:\Python27'
      # Python 3
      PYTHON3_VER: 311
      PYTHON3_VER_DOT: '3.11'
      # Other dependencies
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      GETTEXT_URL: https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.21-v1.16/gettext0.21-iconv1.16-shared-64.zip
      # Escape sequences
      COL_RED: "\x1b[31m"
      COL_GREEN: "\x1b[32m"
      COL_YELLOW: "\x1b[33m"
      COL_RESET: "\x1b[m"

    strategy:
      fail-fast: false

    steps:
      - name: Initialize
        id: init
        shell: bash
        run: |
          # Show Windows version
          cmd /c ver

          git config --global core.autocrlf input

          cygreg=registry
          pyreg=
          echo "VCARCH=amd64" >> $GITHUB_ENV
          echo "WARCH=x64" >> $GITHUB_ENV
          echo "MSYSTEM=MINGW64" >> $GITHUB_ENV

          echo "VCVARSALL=$(vswhere -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          choco install python2 --no-progress

          python3_dir=$(cat "/proc/$cygreg/HKEY_LOCAL_MACHINE/SOFTWARE/Python/PythonCore/${PYTHON3_VER_DOT}$pyreg/InstallPath/@")
          echo "PYTHON3_DIR=$python3_dir" >> $GITHUB_ENV

      - name: Checkout repository from github
        uses: actions/checkout@v3

      - name: Get Vim source code
        shell: cmd
        run: |
          git submodule update --init
          git submodule update --remote

      - name: Create a list of download URLs
        shell: cmd
        run: |
          type NUL > urls.txt
          echo %LUA_RELEASE%>> urls.txt
          echo %WINPTY_URL%>> urls.txt
          echo %GETTEXT_URL%>> urls.txt

      - name: Cache downloaded files
        uses: actions/cache@v3
        with:
          path: downloads
          key: ${{ runner.os }}-x64-${{ hashFiles('urls.txt') }}

      - name: Download dependencies
        shell: cmd
        run: |
          path C:\Program Files\7-Zip;%path%
          if not exist downloads mkdir downloads

          echo %COL_GREEN%Download Lua%COL_RESET%
          call :downloadfile %LUA64_URL% downloads\lua.zip
          7z x downloads\lua.zip -o%LUA_DIR% > nul || exit 1
          echo %COL_GREEN%Download winpty%COL_RESET%

          call :downloadfile %WINPTY_URL% downloads\winpty.zip
          7z x -y downloads\winpty.zip -oD:\winpty > nul || exit 1
          copy /Y D:\winpty\%WARCH%\bin\winpty.dll        vim\src\winpty64.dll
          copy /Y D:\winpty\%WARCH%\bin\winpty-agent.exe  vim\src\

          call :downloadfile %GETTEXT_URL% downloads\gettext64.zip
          7z e -y downloads\gettext64.zip -oD:\gettext64 > nul || exit 1
          copy /Y D:\gettext64\libiconv-2.dll   vim\src\
          copy /Y D:\gettext64\libintl-8.dll    vim\src\

          goto :eof

          :downloadfile
          :: call :downloadfile <URL> <localfile>
          if not exist %2 (
            curl -f -L %1 -o %2
          )
          if ERRORLEVEL 1 (
            rem Retry once.
            curl -f -L %1 -o %2 || exit 1
          )
          goto :eof

      - name: Build (MSVC)
        shell: cmd
        run: |
          call "%VCVARSALL%" %VCARCH%
          cd vim\src
          nmake -nologo -f Make_mvc.mak ^
            FEATURES=HUGE ^
            GUI=yes TERMINAL=yes IME=yes ICONV=yes VIMDLL=yes ^
            DYNAMIC_LUA=yes LUA=%LUA_DIR% ^
            DYNAMIC_PYTHON=yes PYTHON=%PYTHON_DIR% ^
            DYNAMIC_PYTHON3=yes PYTHON3=%PYTHON3_DIR%

      - name: Check version
        shell: cmd
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%
          cd vim
          start /wait src\gvim -u NONE -i NONE -c "redir > version.txt | ver | q" || exit 1
          type version.txt
          echo.
          start /wait src\gvim -u NONE -i NONE -c "redir! > version.txt | so ci\if_ver-1.vim | q"
          start /wait src\gvim -u NONE -i NONE -c "redir >> version.txt | so ci\if_ver-2.vim | q"
          type version.txt
          del version.txt

      - name: Prepare Artifact
        shell: cmd
        run: |
          mkdir artifacts
          copy vim\src\*.exe artifacts
          copy vim\src\*.dll artifacts
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: vim64-msvc
          path: ./artifacts

      - name: Test and show the result of testing gVim
        shell: cmd
        timeout-minutes: 15
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%
          call "%VCVARSALL%" %VCARCH%
          echo %COL_GREEN%Test gVim:%COL_RESET%
          cd vim\src\testdir
          nmake -nologo -f Make_mvc.mak VIMPROG=..\gvim || exit 1

      - name: Test and show the result of testing Vim
        shell: cmd
        timeout-minutes: 15
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%
          call "%VCVARSALL%" %VCARCH%
          echo %COL_GREEN%Test Vim:%COL_RESET%
          cd vim\src\testdir
          nmake -nologo -f Make_mvc.mak clean
          nmake -nologo -f Make_mvc.mak VIMPROG=..\vim || exit 1

